const { src, dest, parallel, series, watch } = require('gulp');
const sass = require('gulp-sass')(require('sass'));
const message = require('gulp-message');
const del = require('gulp-clean');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify-es').default;
const browserSync = require('browser-sync').create();
const sourcemaps = require('gulp-sourcemaps');
const fs = require('fs');
const path = require("path");
const webp = require('gulp-webp');
const pug = require('gulp-pug');
const gulpHtmlBemValidator = require('gulp-html-bem-validator');
const imagemin = require("gulp-imagemin");
const cssminify = require("gulp-css-minify");
const rename = require("gulp-rename");
const resizer = require('gulp-images-resizer');
const imgRetina = require('gulp-img-retina'); // –î–û–†–ê–ë–û–¢–ê–¢–¨ ! reImageSrc –≤ index.js, —É–±—Ä–∞—Ç—å svg

var retinaOpts = {
	suffix: {
		'2': 'x2',
		'1': '',
	}
};

function browsersync(cb) {
	browserSync.init({
		port: 3031,
		server: {
			baseDir: './build/',
			index: "index.html",
		},
		ghostMode: {
			clicks: true,
			forms: true,
			scroll: true
		}
	});
	cb();
}

function clean(cb) {
	message.info('–û—á–∏—Å—Ç–∫–∞ build/');
	del('.build/**', {force:true})
	cb();
}

function contentImagesWebp(cb) {
	src([
		'./src/img/content/**/*.jpg',
		'./src/img/content/**/*.png'
	])
		.pipe(webp())
		.pipe(dest('./build/img/content/webp/'))
		.pipe(browserSync.stream());

	cb();
}

function scripts(cb) {
	src([
		//'node_modules/jquery/dist/jquery.min.js', // –ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
		'./node_modules/vanilla-lazyload/dist/lazyload.js',
		'./node_modules/swiper/swiper-bundle.js',
		'./node_modules/imask/dist/imask.js',
		'./src/js/usr/**/*.js', // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ü–µ
	])
		.pipe(concat('bundle.js')) // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
		.pipe(sourcemaps.init()) // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
		.pipe(uglify()) // –°–∂–∏–º–∞–µ–º JavaScript
		.pipe(sourcemaps.write('./'))
		.pipe(dest('./build/js/')) // –í—ã–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
		.pipe(browserSync.stream()) // –¢—Ä–∏–≥–≥–µ—Ä–∏–º Browsersync –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	cb();
}

function scss(cb) {
	src('./src/scss/style.scss')
		.pipe(sourcemaps.init())
		.pipe(sass().on('error', sass.logError))
		.pipe(concat('/style.css'))
		//.pipe(cssminify())
		.pipe(sourcemaps.write('./'))
		.pipe(dest('./build/css/'))
		.pipe(browserSync.stream());
	cb();
}

function pugTemplates(cb) {

	try {
		src('./src/pug/*.pug')
			.pipe(pug())
			.on('error', function(e) {
				console.log(e.message);
			})
			.pipe(gulpHtmlBemValidator())
			.pipe(imgRetina(retinaOpts))
			.pipe(dest('./build/'))
			.pipe(browserSync.stream());
	} catch (e) {
		console.error(e)
	}

	cb();
}

function createProject(cb) {
	// –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
	const folders = [
		'scss', // –ü–∞–ø–∫–∏ –¥–ª—è scss
		'img/content', // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
		'img/icons', // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∫–æ–Ω–æ–∫, —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤ —Å–ø—Ä–∞–π—Ç
		'fonts', // –®—Ä–∏—Ñ—Ç—ã
		'js/usr', // –ü–∏—Å–∞–Ω–∏–Ω–∞ –Ω–∞ JS
		'js/libs',// Js –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
		'pug/common', // –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ (footer header layout)
		'uploads' // –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
	];
	folders.forEach(dir => {
		dir = "./src/" + dir;
		if(!fs.existsSync(dir)) {
			fs.mkdirSync(dir, {
				recursive: true
			});
			message.info('üìÅ  folder created:' + dir);
		}
	});

	// –ù–∞—á–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
	const files = [
		{f:'./pug/index.pug', c:'h1 –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ !'},
		{f:'./js/usr/app.js', c:'console.log("JS –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ !")'},
		{f:'./scss/style.scss', c:'@import "node_modules/reset-css/sass/reset";body{color:red}'}
	];
	files.forEach(file => {
		let file_path = "./src/" + file.f;
		if(!fs.existsSync(file_path)) {
			fs.writeFile(file_path, file.c, function (err) {

				if (err) {
					console.log(err);
				} else {
					console.log("üìù –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: " + file.f);
				}

			});
		}
	});

	cb();
}

// –†–µ–∫—É—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
const getAllFiles = function(dirPath, arrayOfFiles) {
	files = fs.readdirSync(dirPath)
	arrayOfFiles = arrayOfFiles || []
	files.forEach(function(file) {
		if (fs.statSync(dirPath + "/" + file).isDirectory()) {
			arrayOfFiles = getAllFiles(dirPath + "/" + file, arrayOfFiles)
		} else {
			arrayOfFiles.push([dirPath, file])
		}
	})
	return arrayOfFiles
}

function imageMin(cb) {
	let path_files = './src/img/content';
	getAllFiles(path_files).forEach(function (file) {
		let dest_path = './build/img/content' + file[0].replace(path_files,'');
		console.log("üìù –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º: " + file[0] + "/" + file[1] + " –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤: " + dest_path);

		src(file[0] + "/" + file[1])
			.pipe(rename(function (path) {
				path.basename += "x2";
				console.log(path.basename)
			}))
			//.pipe(imagemin())
			.pipe(dest(dest_path))

			.pipe(rename(function (path) {
				path.basename = path.basename.replace("x2", '');
				console.log(path.basename)
			}))
			.pipe(resizer({
				verbose: true,
				width: "50%"
			}))
			.pipe(imagemin())
			.pipe(dest(dest_path));
	});


	src('./src/img/icons/**/*')
		.pipe(dest('./build/img/icons'))
		.pipe(browserSync.stream());
	cb();
}

function uploads(cb) {

	src('./src/uploads/*')
		.pipe(dest('./build/uploads/'))
		.pipe(browserSync.stream());

	cb();
}

function watchImageMin(cb) {
	watch('./src/img/**/*', imageMin);
	cb();
}

function fonts(cb) {
	src('./src/fonts/**/*')
		.pipe(dest('./build/fonts/'))
	cb();
}

function watchFonts(cb) {
	watch('./src/fonts/**/*', fonts);
	cb();
}

function watchSCSS(cb) {
	watch('./src/scss/**/*.scss', scss);
	cb();
}

function watchJS(cb) {
	watch('./src/js/**/*.js', scripts);
	cb();
}

function watchPugTemplates(cb) {
	watch('./src/pug/**/*.pug', pugTemplates);
	cb();
}

exports.default = series(clean, createProject, fonts, pugTemplates, scss, scripts, uploads, browsersync, watchFonts, watchSCSS, watchJS, watchPugTemplates);
exports.optiimg = series(imageMin);
exports.uploads = series(uploads);
